import os
import requests
import json
import asyncio
from aiogram import Router, Bot, types, F
from aiogram.filters import Command
import sqlite3
import datetime
from datetime import datetime, timedelta
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery ,InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.exceptions import TelegramForbiddenError
from dotenv import load_dotenv, set_key
import logging
from lexicon.lexicon_ru import LEXICON_RU
from keyboards.keyboards import reply_kb, out1_kb, create_out, admin_panel_keyboard, register_btn, ok_rules_btn, \
    channels_check, support_btn, out_money_btn, admins_btn, add_money_btn
from db_manager import get_user_db, get_users_sorted_by, create_user_db, add_links, get_unused_link,get_user_rank, \
    mark_link_as_used, get_link_by_user_and_type, add_offer, get_offer_by_name, get_all_offers, \
    delete_offer, toggle_offer_status, get_offer_links, get_offer_manual_link, get_links_by_offer_id,update_user_balance, cursor, conn, get_referrals, calculate_referral_rewards
from db_manager import get_today_payouts, get_total_payouts, add_payout, get_daily_top, get_all_time_top
import pytz

router = Router()
load_dotenv()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
CRYPTO_BOT_API_TOKEN = os.getenv('CRYPTO_BOT_API_TOKEN')
MIN_WITHDRAWAL = int(os.getenv('MIN_WITHDRAWAL', 150))
USDT_RUB_RATE = float(os.getenv('USDT_RUB_RATE', 90))  # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É—Ä—Å
BOT_TOKEN = os.getenv('BOT_TOKEN')

if not BOT_TOKEN:
    exit("Error: no token provided")

ADMINS = {int(admin_id) for admin_id in os.getenv('ADMINS', '7498299981').split(',')} #–ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ os.getenv
CHANNELS = ["@FluxTraffic", "@Rekvils"]

POST_MESSAGE_ID = None
GROUP_CHAT_ID = "-1002423312131"

MESSAGE_ID_FILE = "post_message_id.txt"

bot = Bot(BOT_TOKEN)
logger = logging.getLogger(__name__)


# --- –ü–µ—Ä–µ–º–µ—â–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ CreateOutState —Å—é–¥–∞ ---
class AdminState(StatesGroup):
    waiting_for_new_admin_id = State()
    waiting_for_del_admin_id = State()
    waiting_for_new_usdt_rate = State() # –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

class CreateOutState(StatesGroup):
    waiting_for_out_amount = State() #–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã –≤—ã–≤–æ–¥–∞

class AddOfferState(StatesGroup):
    waiting_for_offer_name = State()
    waiting_for_manual_link = State()
    waiting_for_price = State()
    waiting_for_links = State()

class Registration(StatesGroup):
    waiting_for_registration = State()

class Payout(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_payout_amount = State()

class BroadcastState(StatesGroup):
    waiting_for_broadcast_type = State()
    waiting_for_broadcast_text = State()
    waiting_for_broadcast_photo = State()
    waiting_for_broadcast_photo_with_text = State()

class AddMoneyState(StatesGroup):  # –ù–æ–≤—ã–π –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–µ–Ω–µ–≥
    waiting_for_user_link = State()
    waiting_for_amount = State()

class DeleteLinksState(StatesGroup):
    waiting_for_links = State()

@router.callback_query(F.data == 'admin_cash_pressed')
async def admin_cash_callback(query: types.CallbackQuery):
    today_payouts = get_today_payouts()
    total_payouts = get_total_payouts()

    await query.message.answer(
        f"<b>üí∞–ö–∞—Å—Å–∞:</b>\n"
        f"‚îú –ö–∞—Å—Å–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: <b>{today_payouts}‚ÇΩ</b>\n"
        f"‚îî –ö–∞—Å—Å–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: <b>{total_payouts}‚ÇΩ</b>",
        parse_mode="HTML"
    )
    await query.answer()

@router.message(Command("–ú—É—Ç"))
async def mute_user(message: Message, bot: Bot):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ
    if message.chat.type not in ["group", "supergroup"]:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–æ–º
    if message.from_user.id not in ADMINS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not message.reply_to_message:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–º—É—Ç–∏—Ç—å.")
        return

    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–º—É—Ç–∏—Ç—å
    user_to_mute = message.reply_to_message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
    try:
        hours = int(message.text.split()[1])
    except (IndexError, ValueError):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ú—É—Ç {–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤}")
        return

    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –º—É—Ç–∞
    mute_until = datetime.now() + timedelta(hours=hours)

    # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    try:
        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=user_to_mute,
            permissions=types.ChatPermissions(
                can_send_messages=False,
                can_send_media_messages=False,
                can_send_polls=False,
                can_send_other_messages=False,
                can_add_web_page_previews=False,
                can_change_info=False,
                can_invite_users=False,
                can_pin_messages=False,
            ),
            until_date=mute_until
        )
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏—à–µ–Ω –ø—Ä–∞–≤–∞ —Å–ª–æ–≤–∞ –Ω–∞ {hours} —á–∞—Å(–æ–≤).")
        logger.info(f"Admin {message.from_user.id} –∑–∞–º—É—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_to_mute} –Ω–∞ {hours} —á–∞—Å–æ–≤.")
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_to_mute}: {e}")

async def send_profit_notification(user_id: int, amount: float, offer_name: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–ø–ª–∞—Ç–µ –≤ –≥—Ä—É–ø–ø—ã."""
    user = get_user_db(user_id)
    if not user:
        logger.warning(f"User {user_id} not found in database.")
        return

    user_status = user[2]  # –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    referral_rewards = calculate_referral_rewards(user_id, amount, notify=False)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –æ—Ñ—Ñ–µ—Ä–∞
    message_text = (
        f"<b>üöÄ–ü—Ä–æ—Ñ–∏—Ç —É <a href='tg://user?id={user_id}'>{user_status}</a>!</b>\n\n"
        f"‚îú –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{offer_name}</b>\n"
        f"‚îî –°—É–º–º–∞: <b>{amount}‚ÇΩ</b>"
    )

    if referral_rewards:
        message_text += "\n\n<b>–î–æ–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤:</b>\n"
        for ref_id, reward in referral_rewards.items():
            message_text += f"‚îî <a href='tg://user?id={ref_id}'>–†–µ—Ñ–µ—Ä–µ—Ä</a>: <b>{reward}‚ÇΩ</b>\n"

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Å—Ç–æ–∏—Ç –±–æ—Ç
    groups = await get_bot_groups()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É
    for group_id in groups:
        try:
            await bot.send_message(chat_id=group_id, text=message_text, parse_mode="HTML")
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {group_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É {group_id}: {e}")

@router.message(F.text == LEXICON_RU['help_button'])
async def main_menu(message: Message):
    sticker_help = "CAACAgIAAxkBAAEMS4ZnpN8OyIqiB-w_xKdTzAABRrO1tyoAAgZOAALPqUBLprBrkUU-Dkc2BA"
    await bot.send_sticker(message.chat.id, sticker=sticker_help)
    await message.answer(text=LEXICON_RU['support_help'], reply_markup=support_btn)

@router.message(F.text == LEXICON_RU['referals_button'])
async def main_menu(message: Message):
    user_id = message.from_user.id
    user = get_user_db(user_id)
    if user is None:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    if user:
        earned_referrals = int(user[5])  # –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è
        bot_info = await bot.get_me()
        bot_username = bot_info.username
        referral_link = f"https://t.me/{bot_username}?start={user_id}"

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ 1-–≥–æ –∏ 2-–≥–æ —É—Ä–æ–≤–Ω—è
        referrals_1_count, referrals_2_count = get_referrals(user_id)
        to_share_btn = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", switch_inline_query=f"{referral_link}\n\n–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é –Ω–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–µ —Ç—Ä–∞—Ñ–∏–∫–∞!–ü–æ–ø—Ä–æ–±—É–π –∏ —Ç—ã!")]
        ])
        referrals = referrals_1_count + referrals_2_count
        await bot.send_photo(chat_id=message.chat.id,
                             photo="AgACAgIAAxkBAAIfemezg0JaTAbaVzN3pyhGVPNGm8ybAALW6jEbdJqgScv5Ce6gxgrwAQADAgADeQADNgQ",
                             caption=f'<a href="https://telegra.ph/Kak-i-gde-iskat-referalov-02-17">–ö–ê–ö –ò –ì–î–ï –ù–ê–ô–¢–ò –†–ï–§–ï–†–ê–õ–û–í?</a>\n\n'
            f'‚ùó<b>–†–µ—Ñ–µ—Ä–∞–ª 1 —É—Ä–æ–≤–Ω—è - —ç—Ç–æ —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –≤–ø–µ—Ä–≤—ã–µ –∑–∞—Ö–æ–¥–∏—Ç –≤ –±–æ—Ç–∞ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ.</b> –ö–æ–≥–¥–∞ —á–µ–ª–æ–≤–µ–∫ –∑–∞–π–¥—ë—Ç –≤ –±–æ—Ç–∞ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ, –æ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤–∞—à–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º 1 —É—Ä–æ–≤–Ω—è. - –ö–æ–≥–¥–∞ –≤–∞—à <b>–†–µ—Ñ–µ—Ä–∞–ª 1 —É—Ä–æ–≤–Ω—è</b> –ø–æ–ª—É—á–∞–µ—Ç –≤—ã–ø–ª–∞—Ç—É  –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 5% –æ—Ç –µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å\n\n'
            f'‚ùóÔ∏è<b>–†–µ—Ñ–µ—Ä–∞–ª 2 —É—Ä–æ–≤–Ω—è - —ç—Ç–æ —Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –≤–ø–µ—Ä–≤—ã–µ –∑–∞—Ö–æ–¥–∏—Ç –≤ –±–æ—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ –≤–∞—à–µ–≥–æ –†–µ—Ñ–µ—Ä–∞–ª–∞ 1 —É—Ä–æ–≤–Ω—è.</b> - –ö–æ–≥–¥–∞ –≤–∞—à <b>–†–µ—Ñ–µ—Ä–∞–ª 2 —É—Ä–æ–≤–Ω—è</b> –ø–æ–ª—É—á–∞–µ—Ç –≤—ã–ø–ª–∞—Ç—É –∑–∞ –∑–∞–¥–∞–Ω–∏–µ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 3% –æ—Ç –µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.'
            f'\n\n<b><tg-spoiler>‚ö†Ô∏è–í–∞–∂–Ω–æ! –í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–µ –≤—ã—á–∏—Ç–∞–µ—Ç—Å—è –∏–∑ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤. –û–Ω–∏ –ø–æ–ª—É—á–∞—é—Ç –≤—Å–µ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞, –∞ –≤–∞—à –±–æ–Ω—É—Å –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ.</tg-spoiler></b>'
            f'\n\n\n<b>üë•–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:</b>\n\n'
            f'–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤—Å–µ–≥–æ: <b>{referrals}</b>\n'
            f'–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{earned_referrals}‚ÇΩ</b>\n\n'
            f'<b>üîó–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n<code>{referral_link}</code>\n\n'
            f'<b>1Ô∏è‚É£–†–µ—Ñ–µ—Ä–∞–ª–æ–≤ 1-–≥–æ —É—Ä–æ–≤–Ω—è:\n‚îî {referrals_1_count}</b>\n\n'
            f'<b>2Ô∏è‚É£–†–µ—Ñ–µ—Ä–∞–ª–æ–≤ 2-–≥–æ —É—Ä–æ–≤–Ω—è:\n‚îî {referrals_2_count}</b>',
                             reply_markup=to_share_btn,
                             parse_mode="HTML")

@router.message(F.text == LEXICON_RU['profile_button'])
async def main_menu(message: Message):
    user_id = message.from_user.id
    user = get_user_db(user_id)
    if user is None:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    if user:
        date_entrance = user[1]
        level = user[2]  # –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        balance = int(user[4])  # –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        total_earned = int(user[8])  # –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
        earned_referrals = int(user[5])  # –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è
        referrals_1_count, referrals_2_count = get_referrals(user_id)
        referrals = referrals_1_count + referrals_2_count

        users_by_balance = get_users_sorted_by('balance')
        users_by_referrals = get_users_sorted_by('referrals')
        users_by_earned_referrals = get_users_sorted_by('earned_referrals')

        place_balance = get_user_rank(user_id, users_by_balance)
        place_referals = get_user_rank(user_id, users_by_referrals)
        place_earned_referrals = get_user_rank(user_id, users_by_earned_referrals)


        sticker_profile = "CAACAgIAAxkBAAEMWeZnp0q1OyUGKUAj9H85by9j_52fZgACwksAAhauQEuV2Of_Z6zJ2DYE"
        await bot.send_sticker(message.chat.id, sticker=sticker_profile)
        await message.answer(
            f'<b>ü™™–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\nID: <b>{message.from_user.id}</b>\n–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: <b>{date_entrance}</b>'
            f'\n–°—Ç–∞—Ç—É—Å: <b>{level}</b>'
            f'\n\n–ë–∞–ª–∞–Ω—Å: <b>{balance}‚ÇΩ</b>'
            f'\n–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Å–µ–≥–æ: <b>{total_earned}‚ÇΩ</b>\n\n'
            f'üë®‚Äçüë©‚Äçüë¶‚Äçüë¶–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{referrals}</b>\n–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{earned_referrals}‚ÇΩ</b>'
            f'\n\n<b>üìä–ú–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ:</b>\n‚îú –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É: {place_balance}'
            f'\n‚îî –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {place_earned_referrals}', reply_markup=out_money_btn)

@router.message(F.text == LEXICON_RU['traffic_button'])
async def traffic_directions(message: Message):
    sticker_up = "CAACAgIAAxkBAAEMXP9np7g49h39298OLMkR0niMkoEKxwAC904AAguVQEsXvniq50hS0zYE"
    await bot.send_sticker(message.chat.id, sticker=sticker_up)

    # #1 - –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤
    offers = get_all_offers()
    active_offers = [offer for offer in offers if offer[2] == 1]
    print(active_offers)
    # #2 - –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
    buttons = []
    for offer in active_offers:
        buttons.append([InlineKeyboardButton(text=f"{offer[1]} - {offer[4]}‚ÇΩ", callback_data=f'{offer[1]}_button_pressed')])  # –î–æ–±–∞–≤–∏–ª–∏ —Ü–µ–Ω—É –≤ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏

    if buttons:
        directions_btn = InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.answer(text=LEXICON_RU['traffic_directions'], reply_markup=directions_btn)
    else:
        await message.answer("<b>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è —Ç—Ä–∞—Ñ–∏–∫–∞</b>")

@router.message(F.text == LEXICON_RU['manuals_button'])
async def main_menu(message: Message):
    sticker_manuals = "CAACAgIAAxkBAAEMXRtnp7ouPSh4VzpkcUkFSU1YWeaOdwACiFUAAohbQUsAAeKA_M0E9ts2BA"
    await bot.send_sticker(message.chat.id, sticker=sticker_manuals)
    await bot.send_photo(chat_id=message.chat.id,
                         photo="AgACAgIAAxkBAAIZu2ent2YgDzt5hH2eo9o4YZy3s7P7AAK77zEbFkNASfvPZRvPEEP7AQADAgADeQADNgQ",
                         caption=LEXICON_RU['manuals'],
                         parse_mode="HTML")

@router.message(F.text == LEXICON_RU['out1_button'])
async def main_menu(message: Message):
    await message.answer('‚¨á<b>–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥</b>', reply_markup=reply_kb)

@router.callback_query(lambda c: c.data.startswith('delete_links_offer_'))
async def delete_links_offer_callback(query: types.CallbackQuery, state: FSMContext):
    offer_id = int(query.data.split('_')[3])  # –ü–æ–ª—É—á–∞–µ–º ID –æ—Ñ—Ñ–µ—Ä–∞ –∏–∑ callback_data
    await state.update_data(offer_id=offer_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ñ—Ñ–µ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await query.message.answer("<b>–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ —Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):</b>")
    await state.set_state(DeleteLinksState.waiting_for_links)
    await query.answer()

@router.message(DeleteLinksState.waiting_for_links)
async def process_delete_links(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        offer_id = data['offer_id']  # –ü–æ–ª—É—á–∞–µ–º ID –æ—Ñ—Ñ–µ—Ä–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        links_to_delete = message.text.split(',')  # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –ø–æ –∑–∞–ø—è—Ç–æ–π

        # –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥—É—é —Å—Å—ã–ª–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        for link in links_to_delete:
            link = link.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            cursor.execute("DELETE FROM links WHERE link = ? AND offer_id = ?", (link, offer_id))
            conn.commit()

        await message.answer(f"<b>–°—Å—ã–ª–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –¥–ª—è –æ—Ñ—Ñ–µ—Ä–∞ —Å ID {offer_id}.</b>")
    except Exception as e:
        logger.error(f"Error deleting links: {e}")
        await message.answer(f"<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–æ–∫: {e}</b>")
    finally:
        await state.clear()

def load_message_id():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π message_id –∏–∑ —Ñ–∞–π–ª–∞"""
    global POST_MESSAGE_ID
    if os.path.exists(MESSAGE_ID_FILE):
        with open(MESSAGE_ID_FILE, 'r') as f:
            try:
                POST_MESSAGE_ID = int(f.read().strip())
            except ValueError:
                POST_MESSAGE_ID = None

def save_message_id(message_id):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç message_id –≤ —Ñ–∞–π–ª"""
    global POST_MESSAGE_ID
    POST_MESSAGE_ID = message_id
    with open(MESSAGE_ID_FILE, 'w') as f:
        f.write(str(message_id))

def format_number(number):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á"""
    return "{:,}".format(int(number)).replace(",", " ")

def get_moscow_time():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ"""
    moscow_tz = pytz.timezone('Europe/Moscow')
    return datetime.now(moscow_tz).strftime("%H:%M")


def create_post_message():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å—Ç–∞"""
    total_payouts = get_total_payouts()
    today_payouts = get_today_payouts()
    update_time = get_moscow_time()

    return (
        "‚ö°Ô∏èF.T. (@FluxTrafficBot)\n\n"
        "<b><a href=\"https://t.me/FluxTraffic\">‚Ä¢–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª</a>\n"
        "<a href=\"https://t.me/+nhNNbOA_nTNmYWNi\">‚Ä¢–ö–∞–Ω–∞–ª —Å –≤—ã–ø–ª–∞—Ç–∞–º–∏</a>\n"
        "<a href=\"https://t.me/FeedbackTrafficBot\">‚Ä¢–¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–∞</a>"
        "<a href=\"https://telegra.ph/Pravila-obshcheniya-v-Flux-Traffic--CHat-02-22\">‚Ä¢–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞</a></b>\n\n"
        f"üí∞–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{format_number(total_payouts)}‚ÇΩ</b>\n"
        f"‚îî–ö–∞—Å—Å–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: <b>{format_number(today_payouts)}‚ÇΩ</b>\n\n"
        f"–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: <b>{update_time} –ø–æ –ú–°–ö</b>"
    )

load_message_id()


@router.message(Command("post"))
async def post_command(message: types.Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /post –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    global POST_MESSAGE_ID

    if message.from_user.id not in ADMINS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if POST_MESSAGE_ID is not None:
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ —Ä–∞–Ω–µ–µ. –û–Ω–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø—Ä–æ—Ñ–∏—Ç–∞—Ö.")
        return

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        sent_message = await bot.send_message(
            chat_id=GROUP_CHAT_ID,
            text=create_post_message(),
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        save_message_id(sent_message.message_id)
        await message.answer("–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω! –¢–µ–ø–µ—Ä—å –æ–Ω –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –ø—Ä–æ—Ñ–∏—Ç–µ.")
    except Exception as e:
        logger.error(f"Error in post_command: {e}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")


async def update_post_message(bot: Bot):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    global POST_MESSAGE_ID
    if POST_MESSAGE_ID is not None:
        try:
            await bot.edit_message_text(
                chat_id=GROUP_CHAT_ID,
                message_id=POST_MESSAGE_ID,
                text=create_post_message(),
                parse_mode="HTML",
                disable_web_page_preview=True
            )
        except Exception as e:
            logger.error(f"Error updating post message: {e}")

async def send_profit_notification(user_id: int, amount: float, offer_name: str, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–ø–ª–∞—Ç–µ –≤ –≥—Ä—É–ø–ø—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ—Å—Ç"""
    user = get_user_db(user_id)
    if not user:
        logger.warning(f"User {user_id} not found in database.")
        return

    user_status = user[2]  # –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    referral_rewards = calculate_referral_rewards(user_id, amount, notify=False)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –æ—Ñ—Ñ–µ—Ä–∞
    message_text = (
        f"<b>üöÄ–ü—Ä–æ—Ñ–∏—Ç —É <a href='tg://user?id={user_id}'>{user_status}</a>!</b>\n\n"
        f"‚îú –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{offer_name}</b>\n"
        f"‚îî  –°—É–º–º–∞: <b>{amount}‚ÇΩ</b>"
    )

    if referral_rewards:
        message_text += "\n\n<b>–î–æ–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤:</b>\n"
        for ref_id, reward in referral_rewards.items():
            message_text += f"‚îî <a href='tg://user?id={ref_id}'>–†–µ—Ñ–µ—Ä–µ—Ä</a>: <b>{reward}‚ÇΩ</b>\n"

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø
    groups = await get_bot_groups()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É
    for group_id in groups:
        try:
            await bot.send_message(
                chat_id=group_id,
                text=message_text,
                parse_mode="HTML"
            )
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {group_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É {group_id}: {e}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await update_post_message(bot)

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º process_amount –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
@router.message(AddMoneyState.waiting_for_amount)
async def process_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        data = await state.get_data()
        user_id = data['user_id']

        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_link = data.get('user_link')

        # –ü–æ–ª—É—á–∞–µ–º offer_id –ø–æ —Å—Å—ã–ª–∫–µ
        cursor.execute("SELECT offer_id FROM links WHERE link = ?", (user_link,))
        offer_data = cursor.fetchone()
        if not offer_data:
            await message.answer("<b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ñ—Ñ–µ—Ä –ø–æ –¥–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ.</b>")
            await state.clear()
            return
        offer_id = offer_data[0]

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞
        cursor.execute("SELECT name FROM offers WHERE id = ?", (offer_id,))
        offer_name_data = cursor.fetchone()
        offer_name = offer_name_data[0] if offer_name_data else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ñ—Ñ–µ—Ä"

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –æ–±—â—É—é —Å—É–º–º—É –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
        update_user_balance(user_id, amount, update_total_earned=True)

        # –ù–∞—á–∏—Å–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è
        calculate_referral_rewards(user_id, amount)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–ø–ª–∞—Ç—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        add_payout(user_id, amount)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        sticker_profit = 'CAACAgIAAxkBAAEMoSdnsj5lKqu2hSV-KommMRkAAVijGIAAAjVRAALsBEhLL_BaF7G5Chk2BA'
        await bot.send_sticker(user_id, sticker_profit)
        await bot.send_message(
            user_id,
            f"<b>üöÄ–£—Å–ø–µ—à–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç!</b>\n‚îú –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{offer_name}</b>\n‚îî  –°—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–∞: <b>{amount}‚ÇΩ</b>",
            parse_mode="HTML"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç
        await send_profit_notification(user_id, amount, offer_name, bot)

        await message.answer(f"<b>–£—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount}‚ÇΩ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id} –ø–æ –æ—Ñ—Ñ–µ—Ä—É '{offer_name}'.</b>")
    except ValueError:
        await message.answer("<b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.</b>")
    except Exception as e:
        logger.error(f"Error in process_amount: {e}")
        await message.answer(f"<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É: {e}</b>")
    finally:
        await state.clear()

def create_crypto_bot_check(amount_usdt: float, user_id: int) -> str | None:
    """–°–æ–∑–¥–∞–µ—Ç —á–µ–∫ –≤ Crypto Bot –¥–ª—è USDT. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–∫ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏."""
    url = "https://pay.crypt.bot/api/createCheck"

    headers = {
        "Crypto-Pay-API-Token": CRYPTO_BOT_API_TOKEN,
        "Content-Type": "application/json",
    }
    amount_usdt = round(amount_usdt, 8)  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 8 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    data = {
        "asset": "USDT",
        "amount": str(amount_usdt),
        "pin_to_user_id": user_id
    }
    logger.info(f"create_crypto_bot_check request {data}")  # Log request data
    try:
        response = requests.post(url, headers=headers, data=json.dumps(data))
        response.raise_for_status()
        result = response.json()
        if result and result['ok']:
            return result['result']['bot_check_url']
        else:
            logger.error(f"Error creating check: {result}")
            return None
    except requests.exceptions.RequestException as e:
        logger.error(f"Error communicating with Crypto Bot: {e}")
        logger.error(f"Response: {response.text}")  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
        return None
    except KeyError as e:
        logger.error(f"Unexpected response from Crypto Bot API: Missing key {e} in the response.")
        return None



# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º process_amount –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –ø–æ—Å–ª–µ –≤—ã–ø–ª–∞—Ç—ã
@router.message(AddMoneyState.waiting_for_amount)
async def process_amount(message: types.Message, state: FSMContext):
    global POST_MESSAGE_ID

    try:
        amount = float(message.text)
        data = await state.get_data()
        user_id = data['user_id']

        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_link = data.get('user_link')

        # –ü–æ–ª—É—á–∞–µ–º offer_id –ø–æ —Å—Å—ã–ª–∫–µ
        cursor.execute("SELECT offer_id FROM links WHERE link = ?", (user_link,))
        offer_data = cursor.fetchone()
        if not offer_data:
            await message.answer("<b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ñ—Ñ–µ—Ä –ø–æ –¥–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ.</b>")
            await state.clear()
            return
        offer_id = offer_data[0]

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞
        cursor.execute("SELECT name FROM offers WHERE id = ?", (offer_id,))
        offer_name_data = cursor.fetchone()
        offer_name = offer_name_data[0] if offer_name_data else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ñ—Ñ–µ—Ä"

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –æ–±—â—É—é —Å—É–º–º—É –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
        update_user_balance(user_id, amount, update_total_earned=True)

        # –ù–∞—á–∏—Å–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è
        calculate_referral_rewards(user_id, amount)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–ø–ª–∞—Ç—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        add_payout(user_id, amount)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        sticker_profit = 'CAACAgIAAxkBAAEMoSdnsj5lKqu2hSV-KommMRkAAVijGIAAAjVRAALsBEhLL_BaF7G5Chk2BA'
        await bot.send_sticker(user_id, sticker_profit)
        await bot.send_message(
            user_id,
            f"<b>üöÄ–£—Å–ø–µ—à–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç!</b>\n‚îú –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{offer_name}</b>\n‚îî –°—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–∞: <b>{amount}‚ÇΩ</b>",
            parse_mode="HTML"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—ã
        await send_profit_notification(user_id, amount, offer_name)

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ –≥—Ä—É–ø–ø–µ
        if POST_MESSAGE_ID:
            await bot.edit_message_text(
                chat_id=GROUP_CHAT_ID,
                message_id=POST_MESSAGE_ID,
                text=create_post_message(),
                parse_mode="HTML",
                disable_web_page_preview=True
            )

        await message.answer(
            f"<b>–£—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount}‚ÇΩ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id} –ø–æ –æ—Ñ—Ñ–µ—Ä—É '{offer_name}'.</b>")
    except ValueError:
        await message.answer("<b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.</b>")
    except Exception as e:
        logger.error(f"Error in process_amount: {e}")
        await message.answer(f"<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É: {e}</b>")
    finally:
        await state.clear()

@router.callback_query(F.data == 'manuals_support_button_pressed')
async def ok_rules_button_pressed(callback: types.CallbackQuery):
    await callback.message.delete()
    sticker_manuals = "CAACAgIAAxkBAAEMXRtnp7ouPSh4VzpkcUkFSU1YWeaOdwACiFUAAohbQUsAAeKA_M0E9ts2BA"
    await bot.send_sticker(callback.message.chat.id, sticker=sticker_manuals)
    await bot.send_photo(chat_id=callback.message.chat.id,
                         photo="AgACAgIAAxkBAAIZu2ent2YgDzt5hH2eo9o4YZy3s7P7AAK77zEbFkNASfvPZRvPEEP7AQADAgADeQADNgQ",
                         caption=LEXICON_RU['manuals'],
                         parse_mode="HTML")

@router.message(CreateOutState.waiting_for_out_amount)
async def process_out_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        user_id = message.from_user.id
        user = get_user_db(user_id)
        if user is None:
            await message.answer("<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start</b>")
            await state.clear()
            return

        earned = int(user[4])
        if amount < MIN_WITHDRAWAL:
            sticker_noyp = "CAACAgIAAxkBAAEMXRdnp7nMqVHBYUFaYsqYi-oHG6rVSQACrE8AAjUMSUu4nD3i5jky1TYE"
            await bot.send_sticker(message.chat.id, sticker=sticker_noyp)
            await message.answer(f"<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ {MIN_WITHDRAWAL}‚ÇΩ</b>", reply_markup=reply_kb)
            await state.clear()
            return
        if amount > earned:
            sticker_cry = "CAACAgIAAxkBAAEMXRFnp7mMseKJ7RAy3dVNbpbysMUPzgACxEoAAn72QUt--FTNDz-CATYE"
            await bot.send_sticker(message.chat.id, sticker=sticker_cry)
            await message.answer("<b>–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –≤–∞—à –±–∞–ª–∞–Ω—Å</b>", reply_markup=reply_kb)
            await state.clear()
            return

        #  –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä—É–±–ª–∏ –≤ USDT
        amount_usdt = amount / USDT_RUB_RATE

        check_link = create_crypto_bot_check(amount_usdt, user_id) # –ò—Å–ø–æ–ª—å–∑—É–µ–º create_crypto_bot_check

        if check_link:
            await message.answer(f"<b>–í–∞—à —á–µ–∫ –Ω–∞ {amount:.2f}‚ÇΩ ({amount_usdt:.2f} USDT):</b>\n{check_link}", reply_markup=reply_kb)  # –ò–∑–º–µ–Ω–∏–ª–∏ —Ç–µ–∫—Å—Ç
            update_user_balance(user_id, -amount)
        else:
            await message.answer("<b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>", reply_markup=reply_kb)

    except ValueError:
        await message.answer("<b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.</b>", reply_markup=reply_kb)
    except Exception as e:
        logger.exception(f"Error in process_out_amount: {e}")
        await message.answer(f"<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥: {e}</b>", reply_markup=reply_kb)
    finally:
      await state.clear()

async def get_bot_groups():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –≥—Ä—É–ø–ø, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Å—Ç–æ–∏—Ç –±–æ—Ç."""
    # –ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª—å–Ω—ã—Ö ID –≥—Ä—É–ø–ø
    groups = [
        -1002423312131,  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –≥—Ä—É–ø–ø
        -1002450691631
    ]
    return groups

def create_crypto_bot_invoice_app(amount_usdt: float) -> str | None:
   """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–≤–æ–π—Å (—á–µ–∫) –≤ Crypto Bot –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω–≤–æ–π—Å –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏."""
   url = "https://pay.crypt.bot/api/createInvoice"  # URL –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API (Mainnet)
   # url = "https://testnet-pay.crypt.bot/api/createInvoice"  # URL –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏ (Testnet)
   headers = {
        "Crypto-Pay-API-Token": CRYPTO_BOT_API_TOKEN,
       "Content-Type": "application/json",
   }
   data = {
        "asset": "USDT",  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º USDT
        "amount": str(amount_usdt),  # –°—É–º–º–∞ –≤ USDT (—Å—Ç—Ä–æ–∫–æ–π)
       "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Å—É–º–º—É {amount_usdt:.2f} USDT"
   }
   logger.info(f"create_crypto_bot_invoice_app request: {data}")
   try:
      response = requests.post(url, headers=headers, data=json.dumps(data))
      response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
      result = response.json()
      if result and result['ok']:
          #  –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL –∏–Ω–≤–æ–π—Å–∞
          return result['result']['bot_invoice_url']
      else:
           logger.error(f"Error creating invoice: {result}")
           return None
   except requests.exceptions.RequestException as e:
        logger.error(f"Error communicating with Crypto Bot: {e}")
        return None
   except KeyError as e:
       logger.error(f"Unexpected response from Crypto Bot API: Missing key {e} in the response.")
       return None


class AddMoneyState(StatesGroup):  # –ù–æ–≤—ã–π –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–µ–Ω–µ–≥
    waiting_for_user_link = State()
    waiting_for_amount = State()


async def check_subscription(bot: Bot, user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã."""
    for channel in CHANNELS:
        try:
            chat_member = await bot.get_chat_member(chat_id=channel, user_id=user_id)
            if chat_member.status not in ["member", "administrator", "creator"]:
                return False  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª
        except TelegramForbiddenError:
            logger.warning(f"Could not get chat member for channel {channel} for user {user_id}.")
            return False  # –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É
        except Exception as e:
            logger.exception(f"Unexpected error while checking subscription for user {user_id} in {channel}: {e}")
            return False  # –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
    return True  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã

class AddBalanceState(StatesGroup):
    waiting_for_amount = State()
@router.message(Command("add"))
async def add_balance_command(message: types.Message, state: FSMContext):
  await message.answer("<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</b>")
  await state.set_state(AddBalanceState.waiting_for_amount)
@router.message(AddBalanceState.waiting_for_amount)
async def process_add_balance_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount <= 0:
            await message.answer("<b>–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.</b>")
            await state.clear()
            return
        amount_usdt = amount / USDT_RUB_RATE
        invoice_link = create_crypto_bot_invoice_app(amount_usdt)
        if invoice_link:
           await message.answer(f"<b>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ —á—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Å—É–º–º—É {amount:.2f}‚ÇΩ:</b>\n{invoice_link}")
        else:
           await message.answer("<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞.</b>")
    except ValueError:
         await message.answer("<b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.</b>")
    except Exception as e:
        logger.exception(f"Error in process_add_balance_amount: {e}")
        await message.answer(f"<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: {e}</b>")
    finally:
         await state.clear()



def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    return user_id in ADMINS

def update_admins_env():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ADMINS –≤ —Ñ–∞–π–ª–µ .env"""
    admins_str = ",".join(map(str, ADMINS))
    set_key(".env", "ADMINS", admins_str)


@router.message(Command("start"), F.chat.type == "private")
async def process_start_command(message: Message, state: FSMContext):
    user_id = message.from_user.id
    referrer_id = None  # –†–µ—Ñ–µ—Ä–µ—Ä 1-–≥–æ —É—Ä–æ–≤–Ω—è
    referrer_id_2 = None  # –†–µ—Ñ–µ—Ä–µ—Ä 2-–≥–æ —É—Ä–æ–≤–Ω—è

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª—ã
    if not await check_subscription(bot, user_id):
        sticker_check = "CAACAgIAAxkBAAEMS5VnpOB5a-N4fuKOP1aGhhKhA7TS4AACaUkAAknSQUvGaTcGapfS_TYE"
        await bot.send_sticker(message.chat.id, sticker=sticker_check)
        await message.answer(
            "<b>–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:</b>\n\n1)–ù–∞—à –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª\n2)–ö–∞–Ω–∞–ª —Å–æ —Å—Ö–µ–º–∞–º–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞",
            reply_markup=channels_check  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        )
        return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω

    try:
        if message.text and len(message.text.split()) > 1:
            try:
                referrer_id = int(message.text.split()[1])  # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ 1-–≥–æ —É—Ä–æ–≤–Ω—è
                if referrer_id == user_id:
                    await message.answer('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –±—ã—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º —Å–∞–º–æ–≥–æ —Å–µ–±—è.')
                    return

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ 1-–≥–æ —É—Ä–æ–≤–Ω—è
                referrer = get_user_db(referrer_id)
                if referrer:
                    # –ï—Å–ª–∏ —É —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ 1-–≥–æ —É—Ä–æ–≤–Ω—è –µ—Å—Ç—å —Å–≤–æ–π —Ä–µ—Ñ–µ—Ä–µ—Ä, —ç—Ç–æ –±—É–¥–µ—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä 2-–≥–æ —É—Ä–æ–≤–Ω—è
                    referrer_id_2 = referrer[6]  # referrer_id —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ 1-–≥–æ —É—Ä–æ–≤–Ω—è
                else:
                    # –ï—Å–ª–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä 1-–≥–æ —É—Ä–æ–≤–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ–±–Ω—É–ª—è–µ–º –æ–±–∞ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                    referrer_id = None
                    referrer_id_2 = None

            except ValueError:
                referrer_id = None
                referrer_id_2 = None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = get_user_db(user_id)
        if user:
            await message.answer(text=LEXICON_RU['restart'], reply_markup=reply_kb)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(Registration.waiting_for_registration)
        await state.update_data(referrer_id=referrer_id, referrer_id_2=referrer_id_2)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∏ –∫–Ω–æ–ø–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await bot.send_photo(chat_id=message.chat.id,
                             photo="AgACAgIAAxkBAAIZkWentEOKI7JGhmenWJb5HJtSz9GHAAKl7zEbFkNASVh_O4i8qULuAQADAgADeQADNgQ",
                             caption=LEXICON_RU['/start'],
                             parse_mode="HTML",
                             reply_markup=register_btn)

    except Exception as e:
        logger.exception(f"Error in process_start_command for user {user_id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data == "check_subscription")
async def check_subscription_callback(callback: CallbackQuery):
    user_id = callback.from_user.id

    if await check_subscription(bot, user_id):
        await callback.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞.")
        await bot.send_photo(chat_id=callback.message.chat.id,
                             photo="AgACAgIAAxkBAAIZkWentEOKI7JGhmenWJb5HJtSz9GHAAKl7zEbFkNASVh_O4i8qULuAQADAgADeQADNgQ",
                             caption=LEXICON_RU['/start'],
                             parse_mode="HTML",
                             reply_markup=register_btn)
    else:
        await callback.message.answer("–í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=channels_check)


@router.message(Command("start"), F.chat.type.in_(["group", "supergroup", "channel"]))
async def process_start_command(message: Message):
    await message.answer(text=LEXICON_RU['no_command'])


@router.callback_query(F.data == 'register_button_pressed')
async def register_button_pressed(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(text=LEXICON_RU['register'], reply_markup=ok_rules_btn)

@router.callback_query(F.data == 'out_money_button_pressed')
async def ok_rules_button_pressed(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('üí∏')
    user_id = callback.from_user.id
    user = get_user_db(user_id)
    if user is None:
        await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    if user:
        earned = int(user[4])
        await callback.message.answer(f'<b>‚Äº–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ 150‚ÇΩ</b>\n\n–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>{earned}‚ÇΩ</b>',
                                      reply_markup=create_out)



async def process_payout_command(message: types.Message, state: FSMContext, bot: Bot):
   try:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–º—É –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å –≤—ã–ø–ª–∞—Ç—É:')
        await state.set_state(Payout.waiting_for_user_id)
   except Exception as e:
        logger.exception(f"Error in process_payout_command: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(Payout.waiting_for_user_id, F.text)
async def process_payout_user_id(message: Message, state: FSMContext, bot: Bot):
    try:
      await state.update_data(user_id=message.text)
      await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–ø–ª–∞—Ç—ã:")
      await state.set_state(Payout.waiting_for_payout_amount)
    except Exception as e:
       logger.exception(f"Error in process_payout_user_id: {e}")
       await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")



@router.message(Payout.waiting_for_payout_amount, F.text)
async def process_payout_amount(message: Message, state: FSMContext, bot: Bot):
    try:
        data = await state.get_data()
        user_id = int(data['user_id'])
        payout_amount = float(message.text)
        user = get_user_db(user_id)
        if user is None:
            await message.answer("–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            await state.clear()
            return

        # –ù–∞—á–∏—Å–ª—è–µ–º –≤—ã–ø–ª–∞—Ç—É –ø–ª–∞—Ç–µ–ª—å—â–∏–∫—É
        update_user_balance(user_id, payout_amount)
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id} –Ω–∞—á–∏—Å–ª–µ–Ω–∞ –≤—ã–ø–ª–∞—Ç–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ {payout_amount}")

        # –ù–∞—á–∏—Å–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è
        calculate_referral_rewards(user_id, payout_amount)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π

        await state.clear()
    except ValueError:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã")
    except Exception as e:
        logger.exception(f"Error in process_payout_amount: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")



@router.callback_query(F.data == 'create_out_button_pressed')
async def create_out_button_pressed(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer('<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞:</b>', reply_markup=out1_kb)
    await state.set_state(CreateOutState.waiting_for_out_amount)

@router.message(CreateOutState.waiting_for_out_amount)
async def process_out_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        user_id = message.from_user.id
        user = get_user_db(user_id)
        if user is None:
            await message.answer("<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start</b>")
            await state.clear()
            return

        earned = int(user[4])
        if amount < MIN_WITHDRAWAL:
            await message.answer(f"<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ {MIN_WITHDRAWAL}‚ÇΩ</b>", reply_markup=reply_kb)
            await state.clear()
            return
        if amount > earned:
            await message.answer("<b>–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –≤–∞—à –±–∞–ª–∞–Ω—Å</b>", reply_markup=reply_kb)
            await state.clear()
            return

        #  –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä—É–±–ª–∏ –≤ USDT (–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏)
        amount_usdt = amount  # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        description = f"–í—ã–ø–ª–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ —Å—É–º–º—É {amount_usdt} USDT."

        invoice_link = create_crypto_bot_invoice(amount_usdt, description) # –ó–∞–º–µ–Ω–∏–ª –Ω–∞ create_crypto_bot_invoice
        if invoice_link:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer(f"<b>–í–∞—à —á–µ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ {amount}‚ÇΩ –≤ USDT:</b>\n{invoice_link}")
            calculate_referral_rewards(user_id, amount)
            update_user_balance(user_id, -amount) # –£–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        else:
          await message.answer("<b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>", reply_markup=reply_kb)
    except ValueError:
       await message.answer("<b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.</b>", reply_markup=reply_kb)
    except Exception as e:
       logger.exception(f"Error in process_out_amount: {e}")
       await message.answer(f"<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥: {e}</b>", reply_markup=reply_kb)
    finally:
      await state.clear()




@router.callback_query(F.data == "confirm_registration")
async def confirm_registration(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = await state.get_data()
    referrer_id = data.get("referrer_id")
    referrer_id_2 = data.get("referrer_id_2")
    await callback.message.delete()
    await create_user_db(user_id, referrer_id, referrer_id_2)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await callback.message.answer(text=LEXICON_RU['registration_successful'], reply_markup=reply_kb)
    await state.clear()


import db_manager
@router.callback_query(lambda c: c.data and c.data.endswith('_button_pressed'))
async def offer_button_pressed(callback: types.CallbackQuery):
    await callback.message.delete()
    offer_type = callback.data.replace('_button_pressed', '')
    user_id = callback.from_user.id
    try:
        offer = db_manager.get_offer_by_name(offer_type)
        if not offer:
            await callback.message.answer("<b>–î–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ</b>")
            return

        price_person = db_manager.get_offer_links(offer[0])  # –ò—Å–ø–æ–ª—å–∑—É–µ–º  db_manager.get_offer_links
        if price_person is None:
            await callback.message.answer("–¶–µ–Ω–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞")
            return
        if not isinstance(price_person, (int, float)):
            logger.error(f"get_offer_links returned unexpected type: {type(price_person)}‚ÇΩ")
            await callback.message.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã.")
            return

        price_person_100 = price_person * 100

        # ... –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ ...
        user_link_data = db_manager.get_link_by_user_and_type(user_id, offer_type, offer[0]) # –ò—Å–ø–æ–ª—å–∑—É–µ–º  db_manager
        if user_link_data:
            user_link, offer_id = user_link_data
        else:
            link_data = db_manager.get_unused_link(offer_type, offer[0]) # –ò—Å–ø–æ–ª—å–∑—É–µ–º  db_manager
            if link_data:
                link_id, user_link = link_data
                db_manager.mark_link_as_used(link_id, user_id) # –ò—Å–ø–æ–ª—å–∑—É–µ–º  db_manager
            else:
                await callback.message.answer('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Å—ã–ª–æ–∫')
                return

        manual_link = db_manager.get_offer_manual_link(offer[0])

        sticker_napravlenie = "CAACAgIAAxkBAAEMXQFnp7ipy_eyrMMiaEE0PFt6gDvs8wAC_lEAAreYQUtYi-eRmtVLBDYE"
        await bot.send_sticker(callback.message.chat.id, sticker=sticker_napravlenie)
        await bot.send_photo(chat_id=callback.message.chat.id,
                             photo="AgACAgIAAxkBAAIZkWentEOKI7JGhmenWJb5HJtSz9GHAAKl7zEbFkNASVh_O4i8qULuAQADAgADeQADNgQ",
                             caption=f'<b>üìò<a href="{manual_link}">–ú–∞–Ω—É–∞–ª –ø–æ –¥–∞–Ω–Ω–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é</a></b>\n\n<b>–í—ã–ø–ª–∞—Ç–∞ –∑–∞ 1 —á–µ–ª–æ–≤–µ–∫–∞: {price_person}‚ÇΩ\n'
                                     f'<tg-spoiler>{price_person_100}‚ÇΩ –ó–∞ 100 —á–µ–ª–æ–≤–µ–∫</tg-spoiler></b>\n\n<b>–í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –∑–∞–ª–∏–≤–∞ —Ç—Ä–∞—Ñ–∏–∫–∞:</b> {user_link}',
                             parse_mode="HTML")

    except Exception as e:
        logger.exception(f"Error in offer_button_pressed: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(lambda c: c.data == "admin_broadcast_pressed")
async def admin_broadcast_callback(query: types.CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–¢–µ–∫—Å—Ç", callback_data="broadcast_text")],
        [InlineKeyboardButton(text="–§–æ—Ç–æ", callback_data="broadcast_photo")],
        [InlineKeyboardButton(text="–§–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º", callback_data="broadcast_photo_with_text")],
    ])
    await query.message.answer("<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:</b>", reply_markup=keyboard)
    await state.set_state(BroadcastState.waiting_for_broadcast_type)

@router.callback_query(BroadcastState.waiting_for_broadcast_type, lambda c: c.data.startswith("broadcast_"))
async def process_broadcast_type(query: types.CallbackQuery, state: FSMContext):
    if query.data == "broadcast_text":
        await query.message.answer("<b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>")
        await state.set_state(BroadcastState.waiting_for_broadcast_text)
    elif query.data == "broadcast_photo":
        await query.message.answer("<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>")
        await state.set_state(BroadcastState.waiting_for_broadcast_photo)
    elif query.data == "broadcast_photo_with_text":
        await query.message.answer("<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>")
        await state.set_state(BroadcastState.waiting_for_broadcast_photo_with_text)

@router.message(BroadcastState.waiting_for_broadcast_text)
async def process_broadcast_text(message: types.Message, state: FSMContext):
    text = message.text
    await broadcast_message(text=text)
    await message.answer("<b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>")
    await state.clear()

@router.message(BroadcastState.waiting_for_broadcast_photo, F.photo)
async def process_broadcast_photo(message: types.Message, state: FSMContext):
    photo = message.photo[-1].file_id  # –ü–æ–ª—É—á–∞–µ–º file_id –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ
    await broadcast_message(photo=photo)
    await message.answer("<b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>")
    await state.clear()

@router.message(BroadcastState.waiting_for_broadcast_photo_with_text, F.photo)
async def process_broadcast_photo_with_text(message: types.Message, state: FSMContext):
    await state.update_data(photo=message.photo[-1].file_id)
    await message.answer("<b>–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>")
    await state.set_state(BroadcastState.waiting_for_broadcast_photo_with_text)

@router.message(BroadcastState.waiting_for_broadcast_photo_with_text)
async def process_broadcast_photo_with_text_text(message: types.Message, state: FSMContext):
   text = message.text
   data = await state.get_data()
   photo = data.get('photo')
   await broadcast_message(text=text, photo=photo)
   await message.answer("<b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>")
   await state.clear()

async def broadcast_message(text: str = None, photo: str = None):
    """–§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    users = db_manager.get_all_users_ids()  # –ü–æ–ª—É—á–∞–µ–º ID –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if not users:
        logging.warning("No users found to send broadcast message.")
        return

    logging.info(f"Starting broadcast message: text={text}, photo={photo}")
    for user_id in users:
        await send_message_to_user(user_id, text=text, photo=photo)
        await asyncio.sleep(0.1)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
    logging.info("Broadcast finished")


async def send_message_to_user(user_id: int, text: str = None, photo: str = None):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        if text and not photo:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
            await bot.send_message(user_id, text=text, parse_mode="HTML")
            logging.info(f"Message sent to {user_id}")
        elif photo and not text:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
            await bot.send_photo(user_id, photo=photo, parse_mode="HTML")
            logging.info(f"Photo sent to {user_id}")
        elif photo and text:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º (caption) –∏ HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
            await bot.send_photo(user_id, photo=photo, caption=text, parse_mode="HTML")
            logging.info(f"Photo with caption sent to {user_id}")
    except TelegramForbiddenError:
        logging.warning(f"User {user_id} blocked the bot")
    except Exception as e:
        logging.error(f"Error sending message to {user_id}: {e}")



@router.callback_query(F.data == 'admin_admins_pressed')
async def admin_admins_callback(callback: types.CallbackQuery):
    admins_str = "\n".join(map(str, ADMINS))
    await callback.message.answer('üëë')
    await callback.message.answer(f'<b>–ê–¥–º–∏–Ω—ã:</b>\n{admins_str}', reply_markup=admins_btn)

@router.callback_query(F.data == 'delete_links_pressed')
async def delete_links_callback(query: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤
    offers = get_all_offers()
    if not offers:
        await query.message.answer("<b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π</b>")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ñ—Ñ–µ—Ä–∞
    buttons = []
    for offer in offers:
        buttons.append([InlineKeyboardButton(text=offer[1], callback_data=f'delete_links_offer_{offer[0]}')])

    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await query.message.answer("<b>–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ñ—Ñ–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫:</b>", reply_markup=markup)
    await query.answer()

@router.message(Command(commands=["admin_panel"]))
async def admin_panel_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if is_admin(user_id):
        await state.clear()
        await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_panel_keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

@router.callback_query(F.data == 'add_admin_pressed')
async def add_admin_callback(query: types.CallbackQuery, state: FSMContext):
     await query.message.answer("<b>–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>")
     await state.set_state(AdminState.waiting_for_new_admin_id)


@router.message(AdminState.waiting_for_new_admin_id)
async def process_new_admin_id(message: types.Message, state: FSMContext):
    try:
        new_admin_id = int(message.text)
        ADMINS.add(new_admin_id)
        update_admins_env()
        await message.answer(f"<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID {new_admin_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.</b>")
    except ValueError:
        await message.answer("<b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.</b>")
    await state.clear()

@router.callback_query(F.data == 'del_admin_pressed')
async def add_admin_callback(query: types.CallbackQuery, state: FSMContext):
     await query.message.answer("<b>üÜî–í–≤–µ–¥–∏—Ç–µ ID –¥–º–∏–Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å:</b>")
     await state.set_state(AdminState.waiting_for_del_admin_id)

@router.message(AdminState.waiting_for_del_admin_id)
async def process_del_admin_id(message: types.Message, state: FSMContext):
    try:
        del_admin_id = int(message.text)
        ADMINS.remove(del_admin_id)
        update_admins_env()
        await message.answer(f'<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID {del_admin_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.</b>')
    except ValueError:
        await message.answer("<b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.</b>")
    except KeyError:
        await message.answer("<b>–ù–µ—Ç —Ç–∞–∫–æ–≥–æ ID –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</b>")
    await state.clear()

@router.callback_query(F.data == 'add_offer_pressed')
async def add_offer_callback(query: types.CallbackQuery, state: FSMContext):
    await query.message.answer(LEXICON_RU['ask_offer_name'])
    await state.set_state(AddOfferState.waiting_for_offer_name)


@router.message(AddOfferState.waiting_for_offer_name)
async def process_offer_name(message: types.Message, state: FSMContext):
    offer_name = message.text
    if get_offer_by_name(offer_name):
        await message.answer(LEXICON_RU['offer_name_exists'].format(offer_name=offer_name))
        return
    await state.update_data(offer_name=message.text)
    await message.answer(LEXICON_RU['ask_manual_link'])
    await state.set_state(AddOfferState.waiting_for_manual_link)


@router.message(AddOfferState.waiting_for_manual_link)
async def process_manual_link(message: types.Message, state: FSMContext):
    await state.update_data(manual_link=message.text)
    await message.answer(LEXICON_RU['ask_price_per_person'])  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–Ω—É –∑–∞ —á–µ–ª–æ–≤–µ–∫–∞
    await state.set_state(AddOfferState.waiting_for_price)



@router.message(AddOfferState.waiting_for_links)
async def process_offer_links(message: types.Message, state: FSMContext):
    data = await state.get_data()
    offer_name = data['offer_name']
    links = message.text.splitlines()
    manual_link = data['manual_link']
    price_per_person = data['price_per_person']

    offer_id = add_offer(offer_name, manual_link, price_per_person)
    if offer_id:
        add_links(links, offer_name, offer_id)
        await message.answer(LEXICON_RU['offer_created'].format(offer_name=offer_name))
        await state.clear()
    else:
        await message.answer(LEXICON_RU['offer_creation_error'].format(offer_name=offer_name))
        await state.clear()


@router.message(Command(commands=["add_links"]))
async def add_links_command(message: types.Message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    parts = message.text.split()
    if len(parts) < 3:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Å—Å—ã–ª–æ–∫ –∏ —Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /add_links, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –ø—Ä–æ–±–µ–ª–∞–º–∏. –ù–∞–ø—Ä–∏–º–µ—Ä /add_links tg offer_name link1 link2")
        return
    link_type = parts[1]
    offer_name = parts[2]
    links = parts[3:]

    offer = get_offer_by_name(offer_name)
    if not offer:
        await message.answer(f"<b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {offer_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –æ—Ñ—Ñ–µ—Ä</b>")
        return

    if links:
        add_links(links, link_type, offer[0])
        await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(links)} –Ω–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫ —Ç–∏–ø–∞ {link_type} –¥–ª—è –æ—Ñ—Ñ–µ—Ä–∞ {offer_name}.")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /add_links, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –ø—Ä–æ–±–µ–ª–∞–º–∏")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback
@router.callback_query(lambda c: c.data == "admin_offer_pressed")
async def admin_offer_callback(query: types.CallbackQuery):
    offers = get_all_offers()
    if not offers:
        await query.message.answer("<b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π</b>")
        return
    buttons = []
    for offer in offers:
        buttons.append([InlineKeyboardButton(text=offer[1], callback_data=f'offer_selected_{offer[0]}')])
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await query.message.answer("<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>", reply_markup=markup)
    await query.answer()

@router.callback_query(lambda c: c.data.startswith('offer_selected_'))
async def offer_selected_callback(query: types.CallbackQuery):
    offer_id = int(query.data.split('_')[2])
    buttons = [
        [InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –æ—Ñ—Ñ–µ—Ä', callback_data=f'delete_offer_{offer_id}')],
        [InlineKeyboardButton(text='–ó–∞–º–æ—Ä–æ–∑–∏—Ç—å/–†–∞–∑–º–æ—Ä–æ–∑–∏—Ç—å', callback_data=f'toggle_offer_{offer_id}')],
        [InlineKeyboardButton(text='–î–µ–π—Å—Ç–≤—É—é—â–∏–µ —Å—Å—ã–ª–∫–∏', callback_data=f'links_offer_{offer_id}')]
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await query.message.answer("<b>–î–µ–π—Å—Ç–≤–∏—è:</b>", reply_markup=markup)
    await query.answer()

@router.callback_query(F.data == 'change_usdt_rate_pressed')
async def change_usdt_rate_callback(query: types.CallbackQuery, state: FSMContext):
    await query.message.answer("<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å USDT/RUB:</b>")
    await state.set_state(AdminState.waiting_for_new_usdt_rate)

@router.message(AdminState.waiting_for_new_usdt_rate)
async def process_new_usdt_rate(message: types.Message, state: FSMContext):
    try:
        new_rate = float(message.text)
        if new_rate <= 0:
           await message.answer("<b>–ö—É—Ä—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.</b>")
           await state.clear()
           return
        global USDT_RUB_RATE  # –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∫–∞–∫ –≥–ª–æ–±–∞–ª—å–Ω—É—é
        USDT_RUB_RATE = new_rate
        set_key(".env", "USDT_RUB_RATE", str(new_rate)) # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ .env —Ñ–∞–π–ª–µ
        await message.answer(f"<b>–ö—É—Ä—Å USDT/RUB —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_rate}</b>")
    except ValueError:
        await message.answer("<b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫—É—Ä—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.</b>")
    except Exception as e:
        logger.exception(f"Error in process_new_usdt_rate: {e}")
        await message.answer(f"<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: {e}</b>")
    finally:
      await state.clear()



@router.callback_query(lambda c: c.data.startswith('delete_offer_'))
async def delete_offer_callback(query: types.CallbackQuery):
    offer_id = int(query.data.split('_')[2])  # –ò–ó–ú–ï–ù–ï–ù–û
    delete_offer(offer_id)
    await query.message.answer(f"<b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {offer_id} –∏ –≤—Å–µ –µ–≥–æ —Å—Å—ã–ª–∫–∏ —É–¥–∞–ª–µ–Ω—ã</b>")
    await query.answer()


@router.callback_query(lambda c: c.data.startswith('toggle_offer_'))
async def toggle_offer_callback(query: types.CallbackQuery):
    offer_id = int(query.data.split('_')[2])  # –ò–ó–ú–ï–ù–ï–ù–û
    new_status = toggle_offer_status(offer_id)
    if new_status == 1:
        await query.message.answer(f"<b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {offer_id} —Ä–∞–∑–º–æ—Ä–æ–∂–µ–Ω–æ</b>")
    elif new_status == 0:
        await query.message.answer(f"<b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {offer_id} –∑–∞–º–æ—Ä–æ–∂–µ–Ω–æ</b>")
    await query.answer()


@router.callback_query(lambda c: c.data.startswith('links_offer_'))
async def links_offer_callback(query: types.CallbackQuery):
    offer_id = int(query.data.split('_')[2])
    links = get_links_by_offer_id(offer_id) #–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    if links:
        text = f"<b>–°—Å—ã–ª–∫–∏ –¥–ª—è –æ—Ñ—Ñ–µ—Ä–∞ {offer_id}:</b>\n"
        for link, link_id, user_id in links:
            if user_id:
                text += f'<b>–°—Å—ã–ª–∫–∞</b>: {link}\n<a href="tg://user?id={user_id}">–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å</a>\n\n'
            else:
                text += f'<b>–°—Å—ã–ª–∫–∞</b>: {link} \n<b>–°—Ç–∞—Ç—É—Å</b>: –ù–µ –≤—ã–¥–∞–Ω–∞\n\n'
        await query.message.answer(text, reply_markup=add_money_btn)
    else:
        await query.message.answer(f"<b>–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è {offer_id}</b>")
    await query.answer()

@router.callback_query(lambda c: c.data == "add_money_pressed")
async def add_money_callback(query: types.CallbackQuery, state: FSMContext):
    await query.message.answer("<b>–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>")
    await state.set_state(AddMoneyState.waiting_for_user_link)

@router.message(AddMoneyState.waiting_for_user_link)
async def process_user_link(message: types.Message, state: FSMContext):
    user_link = message.text
    try:
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å—Å—ã–ª–∫–µ
        cursor = db_manager.conn.cursor()
        cursor.execute("SELECT user_id FROM links WHERE link = ?", (user_link,))
        user_data = cursor.fetchone()
        if not user_data:
            await message.answer("<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>")
            await state.clear()
            return
        user_id = user_data[0]
        await state.update_data(user_id=user_id, user_link=user_link)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –∏ user_link
        await message.answer("<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:</b>")
        await state.set_state(AddMoneyState.waiting_for_amount)
    except Exception as e:
        logger.error(f"Error in process_user_link: {e}")
        await message.answer(f"<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å—Å—ã–ª–∫–µ: {e}</b>")
        await state.clear()


@router.message(AddMoneyState.waiting_for_amount)
async def process_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        data = await state.get_data()
        user_id = data['user_id']

        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Ä–∞–Ω–µ–µ)
        user_link = data.get('user_link')

        # –ü–æ–ª—É—á–∞–µ–º offer_id –ø–æ —Å—Å—ã–ª–∫–µ
        cursor.execute("SELECT offer_id FROM links WHERE link = ?", (user_link,))
        offer_data = cursor.fetchone()
        if not offer_data:
            await message.answer("<b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ñ—Ñ–µ—Ä –ø–æ –¥–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ.</b>")
            await state.clear()
            return
        offer_id = offer_data[0]

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞
        cursor.execute("SELECT name FROM offers WHERE id = ?", (offer_id,))
        offer_name_data = cursor.fetchone()
        offer_name = offer_name_data[0] if offer_name_data else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ñ—Ñ–µ—Ä"

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –æ–±—â—É—é —Å—É–º–º—É –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
        update_user_balance(user_id, amount, update_total_earned=True)

        # –ù–∞—á–∏—Å–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è
        calculate_referral_rewards(user_id, amount)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–ø–ª–∞—Ç—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        add_payout(user_id, amount)  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–ª–∞—Ç–µ

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –æ—Ñ—Ñ–µ—Ä–∞
        sticker_profit = 'CAACAgIAAxkBAAEMoSdnsj5lKqu2hSV-KommMRkAAVijGIAAAjVRAALsBEhLL_BaF7G5Chk2BA'
        await bot.send_sticker(user_id, sticker=sticker_profit)
        await bot.send_message(
            user_id,
            f"<b>üöÄ–£—Å–ø–µ—à–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç!</b>\n‚îú –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{offer_name}</b>\n‚îî –°—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–∞: <b>{amount}‚ÇΩ</b>",
            parse_mode="HTML"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—ã
        await send_profit_notification(user_id, amount, offer_name)

        await message.answer(f"<b>–£—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount}‚ÇΩ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id} –ø–æ –æ—Ñ—Ñ–µ—Ä—É '{offer_name}'.</b>")
    except ValueError:
        await message.answer("<b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.</b>")
    except Exception as e:
        logger.error(f"Error in process_amount: {e}")
        await message.answer(f"<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É: {e}</b>")
    finally:
        await state.clear()

@router.message(Command("daily_top"))
async def daily_top_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /daily_top."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        daily_top = get_daily_top()

        if not daily_top:
            await message.answer("<b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –≤—ã–ø–ª–∞—Ç –Ω–µ –±—ã–ª–æ.</b>", parse_mode="HTML")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–ø–æ–º
        top_message = "<b>üíé –¢–æ–ø-10 –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:</b>\n\n"
        for i, (user_id, total_amount) in enumerate(daily_top, start=1):
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = get_user_db(user_id)
            if user:
                status = user[2]  # –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            else:
                status = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö —Ç—Ä—ë—Ö –º–µ—Å—Ç
            if i == 1:
                place = "üëë"
            elif i == 2:
                place = "ü•à"
            elif i == 3:
                place = "ü•â"
            else:
                place = f"{i}."

            top_message += f"{place} <a href='tg://user?id={user_id}'>{status}</a>: <b>{total_amount}‚ÇΩ</b>\n"

        await message.answer(top_message, parse_mode="HTML")
    except Exception as e:
        logger.error(f"Error in daily_top_command: {e}")
        await message.answer("<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.</b>", parse_mode="HTML")

@router.message(Command("top"))
async def all_time_top_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /top."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è
        all_time_top = get_all_time_top()

        if not all_time_top:
            await message.answer("<b>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã–ø–ª–∞—Ç–∞—Ö.</b>", parse_mode="HTML")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–ø–æ–º
        top_message = "<b>üèÜ –¢–æ–ø-10 –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:</b>\n\n"
        for i, (user_id, total_amount) in enumerate(all_time_top, start=1):
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = get_user_db(user_id)
            if user:
                status = user[2]  # –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            else:
                status = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö —Ç—Ä—ë—Ö –º–µ—Å—Ç
            if i == 1:
                place = "üëë"
            elif i == 2:
                place = "ü•à"
            elif i == 3:
                place = "ü•â"
            else:
                place = f"{i}."

            top_message += f"{place} <a href='tg://user?id={user_id}'>{status}</a>: <b>{total_amount}‚ÇΩ</b>\n"

        await message.answer(top_message, parse_mode="HTML")
    except Exception as e:
        logger.error(f"Error in all_time_top_command: {e}")
        await message.answer("<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.</b>", parse_mode="HTML")

@router.callback_query(lambda c: c.data == "admin_other_pressed")
async def admin_other_callback(query: types.CallbackQuery):
    await query.message.answer("–ó–¥–µ—Å—å –±—É–¥—É—Ç –¥—Ä—É–≥–∏–µ –æ–ø—Ü–∏–∏")
    await query.answer()

@router.message(Command(commands=["me"]), F.chat.type == "private")
async def process_stats_command(message: types.Message):
    await message.answer('‚ùå<b>–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —á–∞—Ç–æ–≤</b> <tg-spoiler>–ù–∞—à —á–∞—Ç @FluxTrafficChat</tg-spoiler>')

@router.message(Command(commands=["me"]))
async def process_stats_command(message: types.Message):
    user_id = message.from_user.id
    user = get_user_db(user_id)
    if user:
        user_id = user[0]
        date_entrance = user[1]
        level = user[2]
        earned = int(user[4])
        total_earned = int(user[8])
        earned_referrals = int(user[5])  # –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è
        referrals_1_count, referrals_2_count = get_referrals(user_id)
        referrals = referrals_1_count + referrals_2_count

        users_by_balance = get_users_sorted_by('balance')
        users_by_referrals = get_users_sorted_by('referrals')
        users_by_earned_referrals = get_users_sorted_by('earned_referrals')

        place_balance = get_user_rank(user_id, users_by_balance)
        place_referals = get_user_rank(user_id, users_by_referrals)
        place_earned_referrals = get_user_rank(user_id, users_by_earned_referrals)

        stats_text = (
                f'<b>ü™™–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: <b>{date_entrance}</b>'
                f'\n–°—Ç–∞—Ç—É—Å: <b>{level}</b>\n'
                f'\n–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Å–µ–≥–æ: <b>{total_earned}‚ÇΩ</b>\n\n'
                f'üë®‚Äçüë©‚Äçüë¶‚Äçüë¶–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{referrals}</b>\n–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{earned_referrals}‚ÇΩ</b>'
                f'\n\n<b>üìä–ú–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ:</b>\n‚îú –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É: {place_balance}'
                f'\n‚îî –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {place_earned_referrals}')
        await message.reply(stats_text)
    else:
        await message.reply("‚ùå–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–π—Å—Ç–µ—Å—å –≤ –±–æ—Ç–µ @FluxTrafficBot")

@router.message(AddOfferState.waiting_for_price)
async def process_price_per_person(message: types.Message, state: FSMContext):
    try:
        price_per_person = float(message.text)
        await state.update_data(price_per_person=price_per_person)
    except ValueError:
        await message.answer(LEXICON_RU['invalid_price'])
        return

    await message.answer("<b>–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–∫–∞–∂–¥—É—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):</b>")
    await state.set_state(AddOfferState.waiting_for_links)

@router.message(F.photo)
async def handle_photo(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–π –±–æ–ª—å—à–æ–π –≤–µ—Ä—Å–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    file_id = message.photo[-1].file_id

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º file_id –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.reply(f"File ID —ç—Ç–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: `{file_id}`", parse_mode="MarkdownV2")
    #parse_mode="MarkdownV2" –Ω—É–∂–µ–Ω —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ file_id

@router.message(F.chat.type == "private")
async def send_echo(message: Message):
    await message.answer(
        text='–Ø –¥–∞–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å —Å–µ–±–µ –Ω–µ –º–æ–≥—É, '
             '—á—Ç–æ —Ç—ã –∏–º–µ–µ—à—å –≤ –≤–∏–¥—É\n\n–ß—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /start'
    )